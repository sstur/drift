(function() {
  "use strict";

  var util = require('util');
  var Fiber = global.Fiber;

  var TEXT_CTYPES = /^text\/|\/json$/i;
  var STATUS_PARTS = /^(\d{3}\b)?\s*(.*)$/i;

  var buildContentType = function(charset, contentType) {
    return (charset && TEXT_CTYPES.test(contentType)) ? contentType + '; charset=' + charset : contentType;
  };

  function Response(httpRes) {
    //node's http response
    this._super = httpRes;
    //init response buffer
    this.clear();
  }

  Response.prototype = {
    headers: function() {
      //add/update/del this.response.headers
      //Set-Cookie is special case
    },
    cookies: function() {
      //add/update/del this.response.cookies
    },
    charset: function(charset) {
      if (arguments.length) {
        return this.response.charset = charset;
      } else {
        return this.response.charset;
      }
    },
    status: function(status) {
      if (arguments.length) {
        return this.response.status = status;
      } else {
        return this.response.status;
      }
    },
    clear: function() {
      //reset response buffer
      this.response = {
        status: '200 OK',
        headers: {},
        cookies: {},
        charset: 'utf-8',
        contentType: 'text/plain',
        body: []
      };
    },
    write: function(data) {
      this.response.body.push(data);
    },
    writebin: function(data) {
      this.response.body.push(data);
    },
    sendFile: function(opts) {
      //todo
    },
    debug: function(data) {
      this.clear();
      this.write(util.inspect(data));
      this.end();
    },
    end: function() {
      var res = this.response, headers = res.headers;
      var statusParts = res.status.match(STATUS_PARTS);
      var statusCode = statusParts[1] || '200', reasonPhrase = statusParts[2] || null;
      headers['Content-Type'] = buildContentType(res.charset, res.contentType);
      //todo: add cookies header
      this._super.writeHead(statusCode, reasonPhrase, headers);
      for (var i = 0; i < res.body.length; i++) {
        this._super.write(res.body[i]);
      }
      this._super.end();
      //todo: is this the right way to end the fiber?
      var fiber = Fiber.current;
      process.nextTick(function() {
        fiber.reset();
      });
      Fiber.yield();
    }
  };

  module.exports = Response;

})();