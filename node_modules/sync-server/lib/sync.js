(function() {
  "use strict";
  var Fiber = require('fibers');

  /**
   * sync() method simply turns any asynchronous function to synchronous one
   * It receives function, context object and then arguments.
   *
   */
  module.exports = function(fn, obj /* arguments */) {

    var args = Array.prototype.slice.call(arguments, 2)
      , fiber = Fiber.current
      , err, result
      , yielded = false;

    // virtual callback
    function syncCallback(callbackError, callbackResult) {
      // forbid to call twice
      if (syncCallback.called) return;
      syncCallback.called = true;

      if (callbackError) {
        err = callbackError;
      } else {
        // Handle situation when callback returns many values
        if (arguments.length > 2) {
          callbackResult = Array.prototype.slice.call(arguments, 1);
        }

        // Assign callback result
        result = callbackResult;
      }

      // Resume fiber if yielding
      if (yielded) fiber.run();
    }

    // push it as last argument
    args.push(syncCallback);

    // call async function
    fn.apply(obj, args);

    // wait for result
    if (!syncCallback.called) {
      yielded = true;
      Fiber.yield();
    }

    // Throw if err
    if (err) throw err;

    return result;
  };

})();