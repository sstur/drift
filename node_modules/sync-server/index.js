(function() {
  "use strict";
  var fs = require('fs')
    , util = require('util')
    , join = require('path').join;

  //use connect's static file server
  require('../connect/lib/patch');
  var staticServer = require('../connect/lib/middleware/static');

  var Fiber = require('fibers');

  //patch fiber.run() to better handle exceptions
  //todo: move to wrapper library and add fiber.abort()
  var _run = Fiber.prototype.run;
  Fiber.prototype.run = function() {
    try {
      return _run.apply(this, arguments);
    } catch(e) {
      if (this.onerror) {
        this.onerror(e);
      } else {
        throw e;
      }
    }
  };

  var Request = require('./lib/request');
  var Response = require('./lib/response');

  //set paths as global variables
  var basePath = global.basePath = join(__dirname, '../..');
  var appPath = global.appPath = join(basePath, 'app');

  //helpers for app and framework
  var loadPath = function(dir) {
    var path = join(appPath, dir);
    var files = fs.readdirSync(path);
    files.forEach(function(file) {
      if (file.match(/\.js$/i) && file.charAt(0) != '_') {
        require(join(path, file));
      }
    });
  };

  //load framework core
  require(join(appPath, 'system/core'));
  //we now have `app` and `define`

  //load framework modules
  loadPath('system/lib');

  //this function only runs within a fiber
  var handler = function(http) {
    var req = new Request(http.req)
      , res = new Response(http.res);
    var pathname = req.getURLParts().path;
    //debugging: ignore favicon request
    if (pathname.match(/\/favicon\.ico$/i)) {
      res.status('404 Favicon Disabled');
      res.end();
    }
    sleep(500);
    if (pathname.match(/^\/test$/i)) {
      var qs = require('./lib/qs');
      res.debug(qs.parse('a=1&&b=2&c&=3&c=4', {flatten: false}));
    } else
    if (pathname.match(/^\/throw$/i)) {
      throw new Error(pathname + ' threw');
    }
    console.log(pathname);
    console.log(req.getHeaders());
    res.status('200 Found');
    res.write('Hello World');
    res.end();
  };

  //for debugging
  var sleep = function(ms) {
  	var fiber = Fiber.current;
  	setTimeout(function() {
  		fiber.run();
  	}, ms);
    Fiber.yield();
  };

  var handleError = function (err, req, res) {
    console.log(err.toString());
    if (!res.headerSent) {
      var status = err.status, headers = {'Content-Type': 'text/plain'};
      if (status) {
        res.writeHead(status, null, headers);
        res.write(err.toString());
      } else {
        res.writeHead(500, 'Internal Error', headers);
        res.write(err.stack || util.inspect(err));
      }
    }
    res.end();
  };

  exports.requestHandler = function (req, res) {
    var handleRequest = function() {
      console.log('fibers created: ' + Fiber.fibersCreated);
      var fiber = Fiber(handler);
      fiber.onerror = function(err) {
        handleError(err, req, res);
      };
      fiber.run({req: req, res: res});
    };
    //attempt to serve static file
    if (req.url.match(/^\/assets\//i)) {
      var opts = {root: basePath, path: req.url};
      staticServer.send(req, res, function(err) {
        err ? handleError(err, req, res) : handleRequest();
      }, opts);
    } else {
      handleRequest();
    }
  };

})();