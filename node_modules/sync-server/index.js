/*global app, define */
(function() {
  "use strict";

  //patch some built-in methods
  require('./support/patch');

  var fs = require('fs')
    , util = require('util')
    , join = require('path').join
    , Fiber = require('fibers')
    , sendfile = require('./lib/sendfile');

  //patch fiber.run() to better handle exceptions
  //todo: move to wrapper library and add fiber.abort()
  var _run = Fiber.prototype.run;
  Fiber.prototype.run = function() {
    try {
      return _run.apply(this, arguments);
    } catch(e) {
      if (this.onError) {
        this.onError(e);
      } else {
        throw e;
      }
    }
  };

  var Request = require('./lib/request');
  var Response = require('./lib/response');

  //set paths as global variables
  var basePath = global.basePath = join(__dirname, '../..');
  var appPath = global.appPath = join(basePath, 'app');

  //helpers for app and framework
  var loadPath = function(dir) {
    var path = join(appPath, dir);
    var files = fs.readdirSync(path);
    files.forEach(function(file) {
      if (file.match(/\.js$/i) && file.charAt(0) != '_') {
        console.log('load module', file);
        require(join(path, file));
      }
    });
  };

  //load framework core
  require(join(appPath, 'system/core'));
  //we now have `app` and `define`

  //load framework modules
  loadPath('system/lib');
  loadPath('routes');

  //this function only runs within a fiber
  var handler = function(http) {
    var req = new Request(http.req)
      , res = new Response(http.res);
    var pathname = req.getURLParts().path;
    //debugging: ignore favicon request
    if (pathname.match(/\/favicon\.ico$/i)) {
      res.status('404 Favicon Disabled');
      res.end();
    }
    sleep(100); //for debugging
    app.route(req, res);
    throw new Error('Router returned without handling request.');
  };

  //for debugging
  var sleep = function(ms) {
  	var fiber = Fiber.current;
  	setTimeout(function() {
  		fiber.run();
  	}, ms);
    Fiber.yield();
  };

  var handleError = function (req, res, err) {
    console.log(err.stack || err.toString());
    if (!res.headerSent) {
      var status = err.status, headers = {'Content-Type': 'text/plain'};
      if (status) {
        res.writeHead(status, null, headers);
        res.write(err.toString());
      } else {
        res.writeHead(500, 'Internal Error', headers);
        res.write(err.stack || util.inspect(err));
      }
    }
    res.end();
  };

  var sendFile = function (req, res, fullpath, contentType, attachment, filename) {
    res.setHeader('Content-Type', contentType);
    //todo: normalize extended characters
    var contentDisposition = 'filename="' + filename.replace(/"/g, "'") + '"';
    if (attachment) {
      contentDisposition = 'attachment; ' + contentDisposition;
    }
    res.setHeader('Content-Disposition', contentDisposition);
    var opts = {
      path: fullpath,
      ctype: contentType,
      on404: function() {
        handleError(req, res, new Error('Unable to serve file ' + fullpath));
      },
      onError: handleError.bind(null, req, res)
    };
    console.log('Sending file ' + fullpath);
    sendfile.send(req, res, opts);
  };

  exports.requestHandler = function (req, res) {
    var handleRequest = function() {
      //hacky: this should be on the prototype
      res.sendFile = sendFile.bind(null, req, res);
      console.log('fibers created: ' + Fiber.fibersCreated);
      var fiber = Fiber(handler);
      fiber.onError = handleError.bind(null, req, res);
      fiber.run({req: req, res: res});
    };
    //attempt to serve static file
    if (req.url.match(/^\/assets\//i)) {
      var opts = {root: basePath, path: req.url};
      sendfile.serve(req, res, opts, function(err) {
        err ? handleError(req, res, err) : handleRequest();
      });
    } else {
      handleRequest();
    }
  };

})();