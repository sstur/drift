allow config/mysql/connections to be specified in build-conf
allow build-conf to be named app-conf (for cases where we use drift for db-init, but build for deployment)
Allow cli flags for `drift serve` that would get added via app.cfg()
  like --debug-tests which could turn on the noCatch flag for the test runner

consolidate mime list between app/system/config/mime.js and /tools/node-server/lib/mime.js
util.log should be async in node-adapter
replace getEnv with __DEV__ ?
getEnv() should be guaranteed in all adapters
_examples/ is required bu tools/init.js
adapters/activex/mysql: deprecate connection string

are the test libraries (system/test) going into every build?

app/system
  move core modules to core/
  libraries like session, auth, mysql, localdb -> lib/
  include optional libraries only if require'd in system/core or app/

fs.stat -> fs.getInfo
fs.readdir -> fs.getDirContents
file-based session store:
  5324e71223dc1548ecaea108.json (first 8 is seconds in hex) [cfm]
  2012-10-19/13a76ac2bcc019dce0e054b26485d8f9.json
config.js to get version from package.json on build
move db-init and devtools (from sendfleet, wfm, cfm)
move compile-views

eslint/jshint:
  catch == and !=
  catch multiple var declarations

Ignore or throw? modelInstance.update({some_non_exist: 'foo'})
should not throw:
  inspect({connection: new ActiveXObject('ADODB.Connection')})

req.doAfter() or app.queueImmediate()

app.route('/users/:id[int:positive]')
 - or -
app.route('/users/:id=int[0,]')
 - or -
custom defined param filters:
  {int: /^\d+$/, hex: /^[0-9A-Za-z]+$/}


//implement OR
model.findAll([{name: 'Alice'}, {name: 'Bob}], {orderBy: 'name'})

Allow access to unaltered qs/form-body as array (emit 'field'?)

Content-Disposition: attachment; filename="sanitized-file"; filename*=UTF-8''unicode%20file
//see: http://greenbytes.de/tech/tc2231/#attfnboth

remove app.cfg('virtual_url')
specify original_url_header in app.cfg

when req.autoSavePath is specified, cleanup files at req.end except those on which file.saveAs() was called

method-override and x-forwarded-for allowed for specific ip
[private-header array?]

if req.method == 'get' and req.query('_method') [method override]
if [method override] and req.query('_body') [parse body]

req._super._read(bytes) no greater than 256kb at a time
Uploads during which client disconnects should emit a 'cancel' event and handle gracefully
bug: specifying content-length still triggers transfer-encoding: chunked

`drift watch` starts node-watch/main.js

app.on('init') used for:
  patching app (app.model)
  patching modules (util.customFn = fn)
  asp/v8cgi adapters

Consistency:
  Revisit http-client

SMTP SSL
apache app.data
allow parseReqBody to handle custom format like XML (adapterRequest.readRawBody()?)
Support uploads with Transfer-Encoding: chunked
 (If request includes Content-Length or Transfer-Encoding, then it must contain Content-Type field)

consolidate:
  parseCookies, parseHeaders, parseUrl (http client)

implement:
  util.joinPath

Node:
  remove http patches and replace static-server module
  replace formidable with dicer
    busboy is based on dicer
    multipart is fork of formidable (adding streams2 support)
  Verify file r/w is fiber-safe
